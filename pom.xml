<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.example</groupId>
	<artifactId>devops</artifactId>
	<version>1.8.0-SNAPSHOT</version>
	<packaging>war</packaging>

	<name>devops</name>
	<description>DevOps Demo Project</description>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>1.5.6.RELEASE</version>
		<relativePath /> <!-- lookup parent from repository -->
	</parent>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.8</java.version>
		<surefire.version>2.17</surefire.version>
		<jacoco.version>0.7.9</jacoco.version>
<!--  This format is used by SonarQube. If you need another format see "buildnumber-maven-plugin" -->
<maven.build.timestamp.format>MM.yyyy</maven.build.timestamp.format>
<yearMonth>${maven.build.timestamp}</yearMonth>    
<!-- ************************-->
<!-- Sonar/Reporting settings -->
<!-- ************************-->
<!-- Sonar/Jacoco integration. Note that these properties need to be defined outside the "coverage" profile
because we want to be to able to execute mvn sonar:sonar without passing a profile -->
<!-- Tells Sonar to use jacoco for coverage results -->
<sonar.projectKey>MyProjectKey</sonar.projectKey>
<sonar.projectName>My Project</sonar.projectName>
 <sonar.projectVersion>${yearMonth}</sonar.projectVersion>
<sonar.language>java</sonar.language>
<sonar.sourceEncoding>UTF-8</sonar.sourceEncoding>
<sonar.java.coveragePlugin>jacoco</sonar.java.coveragePlugin>
<!-- Jacoco version to use -->
<jacoco.version>0.7.2.201409121644</jacoco.version>
<!-- The Sonar Jacoco Listener for JUnit to extract coverage details per test -->
<sonar-jacoco-listeners.version>1.4</sonar-jacoco-listeners.version>
<!-- Don't let Sonar execute tests. We will ask it to Maven 'sonar.dynamicAnalysis' is deprecated since version 4.3 and should no longer be used. -->
<!-- <sonar.dynamicAnalysis>reuseReports</sonar.dynamicAnalysis> -->
<!-- The system property jacoco.outputDir needs to be override on the command line
    with an absolute path if you want to merge results from all modules.
    Example in a Jenkisn build where ${WORKSPACE} is defined and your project in the root directory of the workspace :
    mvn clean install -Prun-its,coverage -Djacoco.outputDir=${WORKSPACE}/target
    Note that unfortunately using the following does not work because of
    http://jira.codehaus.org/browse/SONAR-3427:
<jacoco.outputDir>${session.executionRootDirectory}/target/</jacoco.outputDir>
-->
<jacoco.outputDir>${project.build.directory}</jacoco.outputDir>
<!-- Jacoco output file for UTs -->
<jacoco.out.ut.file>jacoco-ut.exec</jacoco.out.ut.file>
<!-- Tells Sonar where the Jacoco coverage result file is located for Unit Tests -->
<sonar.jacoco.reportPath>${jacoco.outputDir}/${jacoco.out.ut.file}</sonar.jacoco.reportPath>
<!-- Jacoco output file for ITs -->
<jacoco.out.it.file>jacoco-it.exec</jacoco.out.it.file>
<!-- Tells Sonar where the Jacoco coverage result file is located for Integration Tests -->
<sonar.jacoco.itReportPath>${jacoco.outputDir}/${jacoco.out.it.file}</sonar.jacoco.itReportPath>
<!-- <sonar.junit.reportsPath>${project.build.directory}/surefire-reports/</sonar.junit.reportsPath> -->
<!-- <sonar.tests>src/test/java</sonar.tests> -->
<!-- === END of Sonar/Reporting settings === -->
	</properties>

	<distributionManagement>
		<repository>
			<id>release</id>
			<name>releases</name>
			<url>http://localhost:8081/artifactory/libs-release-local</url>
		</repository>
		<snapshotRepository>
			<id>snapshot</id>
			<name>snapshots</name>
			<url>http://localhost:8081/artifactory/libs-snapshot-local</url>
		</snapshotRepository>
	</distributionManagement>

	<scm>
		<connection>scm:git:git@github.com:nandudemy/devops.git</connection>
		<developerConnection>scm:git:git@github.com:nandudemy/devops.git</developerConnection>
		<url>git@github.com:nandudemy/devops.git</url>
		<tag>v1.6.1</tag>
	</scm>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
		    <groupId>org.springframework.boot</groupId>
		    <artifactId>spring-boot-starter-logging</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-tomcat</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<optional>true</optional>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-release-plugin</artifactId>
				<version>2.5.1</version>
				<configuration>
					<tagNameFormat>v@{project.version}</tagNameFormat>
					<autoVersionSubmodules>true</autoVersionSubmodules>
				</configuration>
			</plugin>
			<plugin>
			  <groupId>org.apache.maven.plugins</groupId>
			  <artifactId>maven-surefire-plugin</artifactId>
			  <version>${surefire.version}</version><!--$NO-MVN-MAN-VER$-->
			</plugin>
			<plugin>
			    <groupId>org.jacoco</groupId>
			    <artifactId>jacoco-maven-plugin</artifactId>
			    <version>${jacoco.version}</version>
			    <executions>
			        <execution>
			            <id>default-prepare-agent</id>
			            <goals><goal>prepare-agent</goal></goals>
			        </execution>
			        <execution>
			            <id>default-report</id>
			            <phase>prepare-package</phase>
			            <goals><goal>report</goal></goals>
			        </execution>
					<execution>
						<id>default-check</id>
						<goals>
							<goal>check</goal>
						</goals>
						<configuration>
						<rules>
							<rule>
								<element>BUNDLE</element>
						<limits>
							<limit>
								<counter>COMPLEXITY</counter>
								<value>COVEREDRATIO</value>
								<minimum>0.60</minimum>
							</limit>
						</limits>
						</rule>
					</rules>
					</configuration>
					</execution>
			    </executions>
			</plugin>
		</plugins>
	</build>
  <reporting>
	  <plugins>
		<plugin>
		  <groupId>org.apache.maven.plugins</groupId>
		  <artifactId>maven-checkstyle-plugin</artifactId>
		  <version>8.30</version>
		  <reportSets>
			<reportSet>
			  <reports>
				<report>checkstyle</report>
			  </reports>
			</reportSet>
		  </reportSets>
		</plugin>
	  </plugins>
	</reporting>
<!-- coverage -->
	<profile>
		<id>coverage</id>
		<build>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-surefire-plugin</artifactId>
					<configuration>
						<argLine>${jacoco.agent.ut.arg}</argLine>
						<!-- Specific to generate mapping between tests and covered code -->
						<properties>
							<property>
								<name>listener</name>
								<value>org.sonar.java.jacoco.JUnitListener</value>
							</property>
						</properties>
						<!-- test failure ignore -->
						<testFailureIgnore>true</testFailureIgnore>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-failsafe-plugin</artifactId>
					<configuration>
						<argLine>-Xmx1024m -XX:MaxPermSize=256m ${jacoco.agent.it.arg}
						</argLine>
						<!-- Specific to generate mapping between tests and covered code -->
						<properties>
							<property>
								<name>listener</name>
								<value>org.sonar.java.jacoco.JUnitListener</value>
							</property>
						</properties>
						<!-- Let's put failsafe reports with surefire to have access to tests 
							failures/success reports in sonar -->
						<reportsDirectory>${project.build.directory}/surefire-reports
						</reportsDirectory>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.jacoco</groupId>
					<artifactId>jacoco-maven-plugin</artifactId>
					<version>${jacoco.version}</version>
					<executions>
						<!-- Prepares a variable, jacoco.agent.ut.arg, that contains the info 
							to be passed to the JVM hosting the code being tested. -->
						<execution>
							<id>prepare-ut-agent</id>
							<phase>process-test-classes</phase>
							<goals>
								<goal>prepare-agent</goal>
							</goals>
							<configuration>
								<destFile>${sonar.jacoco.reportPath}</destFile>
								<propertyName>jacoco.agent.ut.arg</propertyName>
								<append>true</append>
							</configuration>
						</execution>
						<!-- Prepares a variable, jacoco.agent.it.arg, that contains the info 
							to be passed to the JVM hosting the code being tested. -->
						<execution>
							<id>prepare-it-agent</id>
							<phase>pre-integration-test</phase>
							<goals>
								<goal>prepare-agent</goal>
							</goals>
							<configuration>
								<destFile>${sonar.jacoco.itReportPath}</destFile>
								<propertyName>jacoco.agent.it.arg</propertyName>
								<append>true</append>
							</configuration>
						</execution>
					</executions>
				</plugin>
			</plugins>
		</build>
		<dependencies>
			<dependency>
				<groupId>org.codehaus.sonar-plugins.java</groupId>
				<artifactId>sonar-jacoco-listeners</artifactId>
				<version>${sonar-jacoco-listeners.version}</version>
				<scope>test</scope>
			</dependency>
		</dependencies>
	</profile>
<!-- Integraton tests -->
	<profile>
		<id>run-its</id>
		<build>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-failsafe-plugin</artifactId>
					<executions>
						<execution>
							<id>integration-test</id>
							<phase>integration-test</phase>
							<goals>
								<goal>integration-test</goal>
							</goals>
						</execution>
						<execution>
							<id>verify</id>
							<phase>verify</phase>
							<goals>
								<goal>verify</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
			</plugins>
		</build>
	</profile>	
</project>
